apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "unified-replication-operator.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "unified-replication-operator.labels" . | nindent 4 }}
    control-plane: controller-manager
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    {{- toYaml .Values.strategy | nindent 4 }}
  selector:
    matchLabels:
      {{- include "unified-replication-operator.selectorLabels" . | nindent 6 }}
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "unified-replication-operator.selectorLabels" . | nindent 8 }}
        control-plane: controller-manager
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "unified-replication-operator.serviceAccountName" . }}
      securityContext:
        {{- if .Values.openshift.compatibleSecurity }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        {{- else }}
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
        {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      containers:
      - name: manager
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /manager
        args:
        {{- if eq .Values.controller.logLevel "debug" }}
        - --zap-devel=true
        {{- else }}
        - --zap-devel=false
        {{- end }}
        securityContext:
          {{- if .Values.openshift.compatibleSecurity }}
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
          {{- else }}
          {{- toYaml .Values.securityContext | nindent 12 }}
          {{- end }}
        ports:
        {{- if .Values.webhook.enabled }}
        - name: webhook
          containerPort: {{ .Values.webhook.port }}
          protocol: TCP
        {{- end }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        {{- if .Values.webhook.enabled }}
        - name: cert
          mountPath: /tmp/k8s-webhook-server/serving-certs
          readOnly: true
        {{- end }}
        - name: tmp
          mountPath: /tmp
        {{- with .Values.extraVolumeMounts }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        env:
        - name: ENABLE_WEBHOOKS
          value: "{{ .Values.webhook.enabled }}"
        - name: ENABLE_AUDIT
          value: "{{ .Values.security.audit.enabled }}"
        - name: ENABLE_ADVANCED_FEATURES
          value: "{{ .Values.controller.enableAdvancedFeatures }}"
        {{- with .Values.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
      {{- if .Values.webhook.enabled }}
      - name: cert
        secret:
          secretName: {{ include "unified-replication-operator.webhookCertSecret" . }}
          defaultMode: 420
      {{- end }}
      - name: tmp
        emptyDir: {}
      {{- with .Values.extraVolumes }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

